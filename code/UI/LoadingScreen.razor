@using Sandbox
@using Sandbox.UI

@namespace DeathCard
@inherits Panel

<root class="@(hidden ? "hidden" : "")">
	@foreach ( var world in loadingWorlds )
	{
		<div class="block">
			<label>Loading VoxelWorld[@(world.NetworkIdent)]...</label>
			<div class="progress">
				@{
					var percentage = MathF.Round( (float)world.Loaded / world.Payloads * 100f, 1 );
				}

				<div class="fill" style="width:@(percentage)%" />
				<label class="text">@(percentage)%</label>
			</div>
		</div>
	}
</root>

<style>
	LoadingScreen {
		position: absolute;
		left: 0px;
		top: 0px;
		width: 100%;
		height: 100%;
		background-color: rgba(black, 0.9);
		backdrop-filter: blur(10px);
		flex-direction: column;
		justify-content: center;
		align-items: center;
		color: white;
		font-size: 16px;
		font-family: 'Retro-Gaming';
		text-shadow: 2px 2px 0px black;
		z-index: 99;
		
		.block {
			flex-direction: column;
			padding: 10px;
			
			.progress {
				margin-top: 5px;
				height: 20px;
				width: 300px;
				padding: 1px;
				border: 1px white;
				background-color: rgba(black, 0.5);

				.fill {
					background-color: white;
					transition: width 0.5s ease-in;
				}

				.text {
					position: absolute;
					left: 100%;
					margin-left: 10px;
					bottom: -5px;
					font-size: 20px;
				}
			}
		}

		opacity: 1;

		&.hidden {
			opacity: 0;
			transition: opacity 0.5s ease-in-out;
		}
	}
</style>

@code {
	List<VoxelWorld> loadingWorlds = new();
	bool hidden = false;

	public override void Tick()
	{
		if ( hidden )
			return;

		var finished = 0;
		foreach ( var world in VoxelWorld.All )
		{
			if ( world.Loaded == 0 && world.Payloads == 0 && !world.Finished )
				continue;

			if ( !world.Finished )
			{
				if ( !loadingWorlds.Contains( world ) )
					loadingWorlds.Add( world );

				continue;
			}

			finished++;
		}

		hidden = finished == VoxelWorld.All.Count;
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( 
			hidden, 
			string.Join( ' ', loadingWorlds.Select( w => w.Loaded ) ) 
		);
	}
}
